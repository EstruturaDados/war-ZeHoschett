#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// =============================
// DEFINIÇÕES DE ESTRUTURAS
// =============================
typedef struct {
    char nome[30];
    char tipo[20];
    int quantidade;
} Item;

typedef struct No {
    Item dados;
    struct No *proximo;
} No;

// =============================
// VARIÁVEIS GLOBAIS
// =============================
#define MAX_ITENS 10
Item mochilaVetor[MAX_ITENS];
int totalItensVetor = 0;

// Ponteiro inicial da lista encadeada
No *inicioLista = NULL;

// =============================
// FUNÇÕES PARA O VETOR
// =============================
void inserirItemVetor() {
    if (totalItensVetor >= MAX_ITENS) {
        printf("\nMochila cheia!\n");
        return;
    }
    Item novo;
    printf("\nNome do item: ");
    scanf("%s", novo.nome);
    printf("Tipo do item: ");
    scanf("%s", novo.tipo);
    printf("Quantidade: ");
    scanf("%d", &novo.quantidade);

    mochilaVetor[totalItensVetor] = novo;
    totalItensVetor++;
    printf("\nItem adicionado com sucesso!\n");
}

void removerItemVetor() {
    if (totalItensVetor == 0) {
        printf("\nMochila vazia!\n");
        return;
    }
    char nome[30];
    printf("\nDigite o nome do item para remover: ");
    scanf("%s", nome);

    int i, encontrado = 0;
    for (i = 0; i < totalItensVetor; i++) {
        if (strcmp(mochilaVetor[i].nome, nome) == 0) {
            encontrado = 1;
            break;
        }
    }

    if (encontrado) {
        for (int j = i; j < totalItensVetor - 1; j++) {
            mochilaVetor[j] = mochilaVetor[j + 1];
        }
        totalItensVetor--;
        printf("\nItem removido com sucesso!\n");
    } else {
        printf("\nItem nao encontrado!\n");
    }
}

void listarItensVetor() {
    if (totalItensVetor == 0) {
        printf("\nMochila vazia!\n");
        return;
    }

    printf("\n===== Itens na Mochila (Vetor) =====\n");
    for (int i = 0; i < totalItensVetor; i++) {
        printf("%d) Nome: %s | Tipo: %s | Quantidade: %d\n",
               i + 1, mochilaVetor[i].nome, mochilaVetor[i].tipo, mochilaVetor[i].quantidade);
    }
}

// Busca sequencial
void buscarSequencialVetor() {
    if (totalItensVetor == 0) {
        printf("\nMochila vazia!\n");
        return;
    }

    char nome[30];
    printf("\nDigite o nome do item para buscar: ");
    scanf("%s", nome);

    int comparacoes = 0;
    for (int i = 0; i < totalItensVetor; i++) {
        comparacoes++;
        if (strcmp(mochilaVetor[i].nome, nome) == 0) {
            printf("\nItem encontrado!\nNome: %s | Tipo: %s | Quantidade: %d\n",
                   mochilaVetor[i].nome, mochilaVetor[i].tipo, mochilaVetor[i].quantidade);
            printf("Comparacoes: %d\n", comparacoes);
            return;
        }
    }
    printf("\nItem nao encontrado!\nComparacoes: %d\n", comparacoes);
}

// Ordenação (Bubble Sort)
void ordenarVetor() {
    Item temp;
    for (int i = 0; i < totalItensVetor - 1; i++) {
        for (int j = 0; j < totalItensVetor - i - 1; j++) {
            if (strcmp(mochilaVetor[j].nome, mochilaVetor[j + 1].nome) > 0) {
                temp = mochilaVetor[j];
                mochilaVetor[j] = mochilaVetor[j + 1];
                mochilaVetor[j + 1] = temp;
            }
        }
    }
    printf("\nItens ordenados por nome!\n");
}

// Busca binária
void buscarBinariaVetor() {
    if (totalItensVetor == 0) {
        printf("\nMochila vazia!\n");
        return;
    }

    char nome[30];
    printf("\nDigite o nome do item para buscar (binaria): ");
    scanf("%s", nome);

    int inicio = 0, fim = totalItensVetor - 1, meio, comparacoes = 0;

    while (inicio <= fim) {
        meio = (inicio + fim) / 2;
        comparacoes++;
        int cmp = strcmp(mochilaVetor[meio].nome, nome);

        if (cmp == 0) {
            printf("\nItem encontrado!\nNome: %s | Tipo: %s | Quantidade: %d\n",
                   mochilaVetor[meio].nome, mochilaVetor[meio].tipo, mochilaVetor[meio].quantidade);
            printf("Comparacoes: %d\n", comparacoes);
            return;
        } else if (cmp < 0) {
            inicio = meio + 1;
        } else {
            fim = meio - 1;
        }
    }

    printf("\nItem nao encontrado!\nComparacoes: %d\n", comparacoes);
}

// =============================
// FUNÇÕES PARA LISTA ENCADEADA
// =============================
void inserirItemLista() {
    No *novo = (No *)malloc(sizeof(No));
    if (!novo) {
        printf("\nErro ao alocar memoria!\n");
        return;
    }

    printf("\nNome do item: ");
    scanf("%s", novo->dados.nome);
    printf("Tipo do item: ");
    scanf("%s", novo->dados.tipo);
    printf("Quantidade: ");
    scanf("%d", &novo->dados.quantidade);

    novo->proximo = inicioLista;
    inicioLista = novo;
    printf("\nItem adicionado na lista!\n");
}

void removerItemLista() {
    if (inicioLista == NULL) {
        printf("\nLista vazia!\n");
        return;
    }

    char nome[30];
    printf("\nDigite o nome do item para remover: ");
    scanf("%s", nome);

    No *atual = inicioLista;
    No *anterior = NULL;

    while (atual != NULL && strcmp(atual->dados.nome, nome) != 0) {
        anterior = atual;
        atual = atual->proximo;
    }

    if (atual == NULL) {
        printf("\nItem nao encontrado!\n");
        return;
    }

    if (anterior == NULL) {
        inicioLista = atual->proximo;
    } else {
        anterior->proximo = atual->proximo;
    }

    free(atual);
    printf("\nItem removido com sucesso!\n");
}

void listarItensLista() {
    if (inicioLista == NULL) {
        printf("\nLista vazia!\n");
        return;
    }

    No *aux = inicioLista;
    printf("\n===== Itens na Mochila (Lista Encadeada) =====\n");
    while (aux != NULL) {
        printf("Nome: %s | Tipo: %s | Quantidade: %d\n",
               aux->dados.nome, aux->dados.tipo, aux->dados.quantidade);
        aux = aux->proximo;
    }
}

void buscarItemLista() {
    if (inicioLista == NULL) {
        printf("\nLista vazia!\n");
        return;
    }

    char nome[30];
    printf("\nDigite o nome do item para buscar: ");
    scanf("%s", nome);

    No *aux = inicioLista;
    int comparacoes = 0;

    while (aux != NULL) {
        comparacoes++;
        if (strcmp(aux->dados.nome, nome) == 0) {
            printf("\nItem encontrado!\nNome: %s | Tipo: %s | Quantidade: %d\n",
                   aux->dados.nome, aux->dados.tipo, aux->dados.quantidade);
            printf("Comparacoes: %d\n", comparacoes);
            return;
        }
        aux = aux->proximo;
    }

    printf("\nItem nao encontrado!\nComparacoes: %d\n", comparacoes);
}

// =============================
// MENU PRINCIPAL
// =============================
void menuVetor() {
    int opc;
    do {
        printf("\n=== Mochila com Vetor ===\n");
        printf("1 - Inserir item\n2 - Remover item\n3 - Listar itens\n4 - Buscar sequencial\n5 - Ordenar itens\n6 - Buscar binaria\n0 - Voltar\nEscolha: ");
        scanf("%d", &opc);

        switch (opc) {
            case 1: inserirItemVetor(); break;
            case 2: removerItemVetor(); break;
            case 3: listarItensVetor(); break;
            case 4: buscarSequencialVetor(); break;
            case 5: ordenarVetor(); break;
            case 6: buscarBinariaVetor(); break;
        }
    } while (opc != 0);
}

void menuLista() {
    int opc;
    do {
        printf("\n=== Mochila com Lista Encadeada ===\n");
        printf("1 - Inserir item\n2 - Remover item\n3 - Listar itens\n4 - Buscar item\n0 - Voltar\nEscolha: ");
        scanf("%d", &opc);

        switch (opc) {
            case 1: inserirItemLista(); break;
            case 2: removerItemLista(); break;
            case 3: listarItensLista(); break;
            case 4: buscarItemLista(); break;
        }
    } while (opc != 0);
}

// =============================
// FUNÇÃO PRINCIPAL
// =============================
int main() {
    int escolha;
    do {
        printf("\n==== SISTEMA DE MOCHILA ====\n");
        printf("1 - Usar Vetor (Lista Sequencial)\n");
        printf("2 - Usar Lista Encadeada\n");
        printf("0 - Sair\nEscolha: ");
        scanf("%d", &escolha);

        switch (escolha) {
            case 1: menuVetor(); break;
            case 2: menuLista(); break;
            case 0: printf("\nEncerrando...\n"); break;
            default: printf("\nOpcao invalida!\n");
        }
    } while (escolha != 0);

    return 0;
}
